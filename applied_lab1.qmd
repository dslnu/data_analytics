---
title: "Applied Analytics: Lab 1"
execute:
  enabled: true
  echo: true
  cache: true
format:
  html:
    code-fold: false
jupyter: python3
diagram:
  cache: true
  cache-dir: ./cache
  engine:
    tikz:
      execpath: lualatex
filters:
  - diagram
---

# Lab overview
This lab is about environment setup. We will use `uv`, a package and project manager for Python.

# uv

1. [Official Docs](https://docs.astral.sh/uv/)

2. [Jupyter integration](https://docs.astral.sh/uv/guides/integration/jupyter/#creating-a-kernel)

3. [Tutorial](https://www.datacamp.com/tutorial/python-uv)

# Git

## Recommended reading:

- [Git Book](https://git-scm.com/book/en/v2)
- [Git Magic](http://www-cs-students.stanford.edu/~blynn/gitmagic/pr01.html)

# Basic steps
1. Install Git for Windows.
2. Run `Git Bash`.
3. Initialize project: `uv init test`.
4. Navigate to test directory: `cd test`.
5. Create a test file: `echo "test contents" > test.txt`.
6. `uv` will initialize a Git repo automatically, so no need to do `git init`.
7. Check Git repo status: `git status`.
8. Add the test file we just created along with `uv`'s files: `git add .`.
9. Commit the test file: `git commit -m "Commit message"`
  - Git will complain that it doesn't know who you are. Update your name and email per it's instructions.
10. Navigate to GitHub and create your account and repository.
11. Copy repository URL and set it in your local repo via `git remote add origin <GITHUB_REPO_URL>`.
12. Push your local changes to remote repo: `git push -u origin master`.
  - Note that `-u` option is only needed the first time you're doing the push in any local branch.
13. Add libraries to your project via `uv add ...`, e.g.:
  - `uv add jupyter`
  - `uv add pandas`
  - etc.
14. First `uv add ...` will create a Python virtual environment inside the project directory in `.venv.`. This should not be committed to Git and is automatically added to the `.gitignore` file.
15. In order to run Python commands using the environment `uv` created during `init`, execute `uv run ...`, e.g. `uv run jupyter notebook`.   

# Exercises

1. Understand what Python virtual environments are for.
2. Setup an empty project with `uv`. It should contain its own `venv`.
3. In your project, setup the following packages:

  - Cleaning/preprocessing tools, e.g. <https://github.com/NathanEpstein/Dora>
  - Static type checker (<https://github.com/python/mypy>). Tutorial here: <https://betterstack.com/community/guides/scaling-python/python-type-hints/>

3. Commit it to git repo.
4. Proceed to [Bigdata lab1](./bigdata_lab1.qmd).

# Notes.

1. If having issues with Jupyter extension in VsCode (`Extension 'ms-toolsai.jupyter' wants API proposal 'notebookCellExecutionState' but that proposal DOES NOT EXIST`), please add the following to VSCode's launch arguments:
   ```
   "enable-proposed-api": ["ms-toolsai.jupyter"]
   ```
   (<https://www.reddit.com/r/archlinux/comments/tzccbm/comment/i3ylmk8/>)

2.
