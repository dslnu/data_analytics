---
title: "Intro to AWS"
author: 
  - name: MSDE
    affiliation: Lviv University
code-fold: false
execute:
  enabled: false
  cache: true
diagram:
  cache: true
  cache-dir: ./cache
  engine:
    tikz:
      execpath: lualatex
      additional-packages: |
        \usetikzlibrary{arrows.meta}
        \usetikzlibrary{positioning}
        \usetikzlibrary{decorations.pathreplacing}
filters:
  - diagram
title-slide-attributes:
  data-background-image: img/aws/aws_logo.svg
  data-background-size: contain
  data-background-opacity: "0.2"
format: 
  revealjs:
    css: ./custom.css
    preview-links: auto
    slide-number: true
    theme: default
    multiplex:
      url: 'https://mplex.vitv.ly'
      secret: 'd2b8d9b3dbfcd277ebd14c1f6438f4b2'
      id: '3a2e2f1bcc09bfaea40b07ec7ef9e0d0f772edbf8a1dc2af2c107e1cb2b4fb10'
---

## Member Account creation

:::{.callout-important icon=false}
- you'll receive several emails
- one of these should be `Your Amazon Web Services Account is Ready - Get Started Now`
- in the email, click on 'Start building in AWS console'
- Sign in with root user email
- Click 'forgot password'
- receive reset password email
- upon login, you'll receive email: Verify your identity. Contains verification code.
- skip MFA
:::

## AWS regions

:::{.callout-tip icon=false}
Go to <https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html> to get an overview of available regions
:::

## Launch an instance
:::{.callout-note icon=false}
- pick name: jupyter
- OS type: ubuntu
- instance type: t2.micro
:::

## Launch an instance
![](img/aws/ec2/step1)

## Launch an instance
:::{.callout-important icon=false}
## Free tier note
![](img/aws/ec2/step2)
:::

## Machine type
![](img/aws/ec2/step3)





## Key pair creation
:::{.callout-important icon=false}
- click on 'Create new key pair'
- name: `jupyter`
- type: `ed25519`
- Private key file format: PEM
- save `jupyter.pem` somewhere

:::

## Key pair creation
![](img/aws/ec2/step4)

## Network settings

- network settings: allow ssh traffic only
- storage: leave default settings

## Network settings
![](img/aws/ec2/step5)

## Storage
![](img/aws/ec2/step6)

## Final stage
![](img/aws/ec2/step7)

## Instances
![](img/aws/ec2/step9)

## Connect to instance
:::{.callout-note icon=false}

- In order to see your instance, go to <https://us-east-2.console.aws.amazon.com/ec2/home> and click on `Instances`
- Now click `Connect to instance`
- click on `SSH client` tab
:::

## Connect to instance

![](img/aws/ec2/step8)



## Connect to instance
:::{.callout-important icon=false}
## Steps:
first execute
```
chmod 0400 jupyter.pem
```
otherwise during execution you might get:
```

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for 'jupyter.pem' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key "jupyter.pem": bad permissions
```
execute:
```
ssh -i "jupyter.pem" ubuntu@ec2-18-191-211-55.us-east-2.compute.amazonaws.com
```
:::

## Check EBS volumes
![](img/aws/ec2/step10)

## Check EBS volumes
![](img/aws/ec2/step11)

## Instance setup
:::{.callout-tip icon=false}
## Check disks
```bash
ubuntu@ip-172-31-27-235:~$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/root       6.8G  1.8G  5.0G  27% /
tmpfs           479M     0  479M   0% /dev/shm
tmpfs           192M  868K  191M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
/dev/xvda16     881M   87M  733M  11% /boot
/dev/xvda15     105M  6.2M   99M   6% /boot/efi
tmpfs            96M   12K   96M   1% /run/user/1000
```
:::
## Instance setup
:::{.callout-tip icon=false}
## Memory
```bash
ubuntu@ip-172-31-27-235:~$ free -h
               total        used        free      shared  buff/cache   available
Mem:           957Mi       350Mi       323Mi       880Ki       439Mi       606Mi
Swap:             0B          0B          0B
```
:::

## Instance setup {.scrollable}
:::{.callout-note icon=false}
## CPU
```bash
ubuntu@ip-172-31-27-235:~$ lscpu
Architecture:                x86_64
  CPU op-mode(s):            32-bit, 64-bit
  Address sizes:             46 bits physical, 48 bits virtual
  Byte Order:                Little Endian
CPU(s):                      1
  On-line CPU(s) list:       0
Vendor ID:                   GenuineIntel
  Model name:                Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz
    CPU family:              6
    Model:                   79
    Thread(s) per core:      1
    Core(s) per socket:      1
    Socket(s):               1
    Stepping:                1
    BogoMIPS:                4599.99
    Flags:                   fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_freq pni
                             pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm pti fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveo
                             pt
```
Alternatively, `cat /proc/cpuinfo`
:::
## Instance setup
:::{.callout-tip icon=false}
## System info
```bash
ubuntu@ip-172-31-27-235:~$ cat /etc/os-release
PRETTY_NAME="Ubuntu 24.04.3 LTS"
NAME="Ubuntu"
VERSION_ID="24.04"
VERSION="24.04.3 LTS (Noble Numbat)"
VERSION_CODENAME=noble
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
UBUNTU_CODENAME=noble
LOGO=ubuntu-logo
```
:::

## Instance setup {.scrollable}
:::{.callout-tip icon=false}
## Install uv
```bash
ubuntu@ip-172-31-27-235:~$ curl -LsSf https://astral.sh/uv/install.sh | sh
downloading uv 0.9.5 x86_64-unknown-linux-gnu
no checksums to verify
installing to /home/ubuntu/.local/bin
  uv
  uvx
everything's installed!

To add $HOME/.local/bin to your PATH, either restart your shell or run:

    source $HOME/.local/bin/env (sh, bash, zsh)
    source $HOME/.local/bin/env.fish (fish)
```
if you try running it now, you'll get:
```bash
ubuntu@ip-172-31-27-235:~$ uv
Command 'uv' not found, but can be installed with:
sudo snap install astral-uv

```
To fix this, execute:
```bash
source $HOME/.local/bin/env
```
:::

## Instance setup
:::{.callout-tip icon=false}
## init uv
```bash
ubuntu@ip-172-31-27-235:~$ uv init analytics
Initialized project `analytics` at `/home/ubuntu/analytics`
```
Then:
```bash
uv add jupyter
```
:::

## Instance setup
:::{.callout-tip icon=false}
## tmux
Install tmux and run tmux on ubuntu via:
```bash
apt install tmux
```
:::

## Instance setup
:::{.callout-tip icon=false}
## Securing server
```bash
cd ~
mkdir ssl
cd ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mykey.key -out mycert.pem
```
Docs here: <https://docs.aws.amazon.com/dlami/latest/devguide/setup-jupyter-secure.html>.
:::

## Instance setup
:::{.callout-tip icon=false}
## Starting server
Start the server:
```bash
uv run jupyter notebook --no-browser --certfile=~/ssl/mycert.pem --keyfile ~/ssl/mykey.key
```

Docs here: <https://docs.aws.amazon.com/dlami/latest/devguide/setup-jupyter-start-server.html>
:::

## Instance setup
:::{.callout-tip icon=false}
## SSH tunnel
On your host, run ssh tunnel (https://www.digitalocean.com/community/tutorials/ssh-port-forwarding):
```bash
ssh -i jupyter.pem -N -f -L 8899:localhost:8888 ubuntu@ec2-18-191-211-55.us-east-2.compute.amazonaws.com

```
Now you should be able to access Jupyter in browser on address `https://localhost:8899`
:::

## Starting/stopping instance

![](img/aws/ec2/step12)

## Instance setup
:::{.callout-tip icon=false}
## Elastic IP
Note that IP address is different after restart. To fix this, use Elastic IP:

![](img/aws/ec2/step13)
:::


## Instance setup
:::{.callout-tip icon=false}
## Elastic IP

Two steps are necessary:

- allocate
- associate
:::

## Instance setup
:::{.callout-tip icon=false}
## Elastic IP
![](img/aws/ec2/step14)
:::

## Instance setup
:::{.callout-tip icon=false}
## Elastic IP
An then you can use
```bash
ssh -i jupyter.pem ubuntu@<ELASTIC_IP>
```
:::

:::{.callout-important icon=false}
Don't forget to re-execute ssh tunnel
:::

